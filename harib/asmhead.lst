GAS LISTING asmhead.s 			page 1


   1              	    .code16
   2              	
   3              	    .set BOTPAK, 0x00280000 # bootpack load destination
   4              	    .set DSKCAC, 0x00100000 # disk cache
   5              	    .set DSKCAC0, 0x00008000 # disc cache (real mode)
   6              	
   7              	    # BOOT_INFO
   8              	    .set CYLS, 0x0ff0
   9              	    .set LEDS, 0x0ff1
  10              	    .set VMODE, 0x0ff2 # bit color
  11              	    .set SCRNX, 0x0ff4 # resolution X
  12              	    .set SCRNY, 0x0ff6 # resolution Y
  13              	    .set VRAM, 0x0ff8 # start of graphic buffer
  14              	
  15 0000 B400     	    mov $0x00, %ah # AT BIOS: ビデオモード設定
  16 0002 B013     	    mov $0x13, %al # mode: VGA 320x200 8bit color packed pixel (?)
  17 0004 CD10     	    int $0x10
  18              	
  19              	    # set video configs to BOOT_INFO
  20 0006 C606F20F 	    movb $8, VMODE
  20      08
  21 000b C706F40F 	    movw $320, SCRNX
  21      4001
  22 0011 C706F60F 	    movw $200, SCRNY
  22      C800
  23 0017 66C706F8 	    movl $0x000a0000, VRAM
  23      0F00000A 
  23      00
  24              	
  25              	    # get keyboard state from BIOS
  26 0020 B402     	    mov $0x02, %ah
  27 0022 CD16     	    int $0x16
  28 0024 A2F10F   	    mov %al, LEDS
  29              	
  30              	# ここからの解説は後回しらしい また来る
  31              	    # prevent PIC from interrupt
  32              	    # in PC/AT specification, do this before CLI
  33              	    # or get hanged up
  34              	    # we do PIC initialize later
  35 0027 B0FF     	    mov $0xff, %al
  36 0029 E621     	    out %al, $0x21 # out: write %AL to serial port
  37 002b 90       	    nop
  38 002c E6A1     	    out %al, $0xa1
  39              	
  40 002e FA       	    cli # clear interrupt flag
  41              	
  42              	    # set A20GATE to make memory over 1MB accessible from CPU
  43 002f E8B500   	    call waitkbdout
  44 0032 B0D1     	    mov $0xd1, %al
  45 0034 E664     	    out %al, $0x64
  46 0036 E8AE00   	    call waitkbdout
  47 0039 B0DF     	    mov $0xdf, %al # enable A20
  48 003b E660     	    out %al, $0x60
  49 003d E8A700   	    call waitkbdout
  50              	
  51              	# enable protect mode
  52              	    # .arch i486 とかにすれば変な命令に対して警告してくれるようにもなる
GAS LISTING asmhead.s 			page 2


  53              	    # .code32 # これはバグる！
  54              	    .arch i486 # instrset i486p
  55 0040 0F011600 	    lgdt (GDTR0) # LGDT GDTR m: load global descriptor table register
  55      00
  56 0045 0F20C0   	    mov %cr0, %eax # cr0: control register 0
  57 0048 6625FFFF 	    and $0x7fffffff, %eax # set bit31 to 0
  57      FF7F
  58 004e 6683C801 	    or $0x00000001, %eax # set bit0 to 1
  59 0052 0F22C0   	    mov %eax, %cr0
  60 0055 EB00     	    jmp pipelineflush
  61              	
  62              	pipelineflush:
  63 0057 B80800   	    mov $1*8, %ax # これ大丈夫？
  64 005a 8ED8     	    mov %ax, %ds
  65 005c 8EC0     	    mov %ax, %es
  66 005e 8EE0     	    mov %ax, %fs
  67 0060 8EE8     	    mov %ax, %gs
  68 0062 8ED0     	    mov %ax, %ss
  69              	
  70              	    # transfer bootpack
  71 0064 66BE0000 	    mov $bootpack, %esi # from
  71      0000
  72 006a 66BF0000 	    mov $BOTPAK, %edi # to
  72      2800
  73 0070 66B90000 	    mov $512*1024/4, %ecx # 1024 sector
  73      0200
  74 0076 E87500   	    call memcpy
  75              	
  76              	    # transfer disc data
  77              	    # boot sector
  78 0079 66BE007C 	    mov $0x7c00, %esi # from
  78      0000
  79 007f 66BF0000 	    mov $DSKCAC, %edi # to
  79      1000
  80 0085 66B98000 	    mov $512/4, %ecx
  80      0000
  81 008b E86000   	    call memcpy
  82              	
  83              	    # all remained
  84 008e 66BE0082 	    mov $DSKCAC0+512, %esi # from
  84      0000
  85 0094 66BF0002 	    mov $DSKCAC+512, %edi # to
  85      1000
  86 009a 66B90000 	    mov $0, %ecx
  86      0000
  87 00a0 8A0EF00F 	    movb CYLS, %cl # ecx -> ch と cl
  88 00a4 6669C900 	    imul $512*18*2/4, %ecx # imul: signed multiply
  88      120000
  89 00ab 6681E980 	    sub $512/4, %ecx # subtract ipl size
  89      000000
  90 00b2 E83900   	    call memcpy
  91              	
  92              	# asmhead done, start bootpack
  93 00b5 66BB0000 	    mov $BOTPAK, %ebx
  93      2800
  94 00bb 67668B4B 	    mov 16(%ebx), %ecx
  94      10
GAS LISTING asmhead.s 			page 3


  95 00c0 6683C103 	    add $3, %ecx
  96 00c4 66C1E902 	    shr $2, %ecx # shr: shift right 2 == div 4
  97 00c8 7410     	    jz skip # nothing to transfer
  98 00ca 67668B73 	    mov 20(%ebx), %esi # from
  98      14
  99 00cf 6601DE   	    add %ebx, %esi
 100 00d2 67668B7B 	    mov 12(%ebx), %edi
 100      0C
 101 00d7 E81400   	    call memcpy
 102              	skip:
 103 00da 67668B63 	    mov 12(%ebx), %esp # stack initial value
 103      0C
 104              	    # GDTで設定したセグメントの1bへジャンプ
 105              	    # 1b には hrb 形式でのエントリーポイントがある
 106              	    # $2*8 -> RPL=0 (ring 0), TI=0 (GDT), index=0x10 (entry 2)
 107 00df 66EA1B00 	    ljmpl $2*8, $0x0000001b # Immediate form long jumps
 107      00001000 
 108              	
 109              	waitkbdout:
 110 00e7 E464     	    in $0x64, %al # in AL imm8: input from port
 111 00e9 2402     	    and $0x02, %al
 112 00eb 75FA     	    jnz waitkbdout
 113 00ed C3       	    ret
 114              	
 115              	memcpy:
 116 00ee 67668B06 	    mov (%esi), %eax
 117 00f2 6683C604 	    add $4, %esi
 118 00f6 67668907 	    mov %eax, (%edi)
 119 00fa 6683C704 	    add $4, %edi
 120 00fe 6683E901 	    sub $1, %ecx
 121 0102 75EA     	    jnz memcpy
 122 0104 C3       	    ret
 123              	
 124 0105 00000000 	    .align 16, 0 # location counter を16の倍数まで進める (zero padding)
 124      00000000 
 124      000000
 125              	GDT0:
 126 0110 00000000 	    .skip 8 # intel needs null descriptor
 126      00000000 
 127              	    # 64 bit per entry (segment descriptor)
 128 0118 FFFF0000 	    .word 0xffff, 0x0000, 0x9200, 0x00cf # r/w able segment 32bit
 128      0092CF00 
 129 0120 FFFF0000 	    .word 0xffff, 0x0000, 0x9a28, 0x0047 # executable segment 32bit (bootpack)
 129      289A4700 
 130 0128 0000     	    .word 0
 131              	GDTR0:
 132 012a 1700     	    .word 8*3-1 # 1 引けってたしかに書いてある
 133 012c 00000000 	    .int GDT0 # .int == .long (32bit)
 134              	
 135              	    .align 16
 136              	bootpack:
GAS LISTING asmhead.s 			page 4


DEFINED SYMBOLS
           asmhead.s:3      *ABS*:0000000000280000 BOTPAK
           asmhead.s:4      *ABS*:0000000000100000 DSKCAC
           asmhead.s:5      *ABS*:0000000000008000 DSKCAC0
           asmhead.s:8      *ABS*:0000000000000ff0 CYLS
           asmhead.s:9      *ABS*:0000000000000ff1 LEDS
           asmhead.s:10     *ABS*:0000000000000ff2 VMODE
           asmhead.s:11     *ABS*:0000000000000ff4 SCRNX
           asmhead.s:12     *ABS*:0000000000000ff6 SCRNY
           asmhead.s:13     *ABS*:0000000000000ff8 VRAM
           asmhead.s:109    .text:00000000000000e7 waitkbdout
           asmhead.s:131    .text:000000000000012a GDTR0
           asmhead.s:62     .text:0000000000000057 pipelineflush
           asmhead.s:136    .text:0000000000000130 bootpack
           asmhead.s:115    .text:00000000000000ee memcpy
           asmhead.s:102    .text:00000000000000da skip
           asmhead.s:125    .text:0000000000000110 GDT0

NO UNDEFINED SYMBOLS
